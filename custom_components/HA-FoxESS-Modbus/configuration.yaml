# FoxESS Modbus H3 Plugin - Configuration and Sensor Mappings
# Adapted by: https://github.com/rsaemann/HA-FoxESS-H3-Modbus
# Original Source https://github.com/StealthChesnut/HA-FoxESS-Modbus
# This file isn't a valid configuration file!

# Instructions:
# copy the custom_components directory to your HA custom_components directory
# Add the modbus: lines to your configuration.yaml
# Add the sensors below to your configuration.yaml sensor section
#

# This defines where your HA looks up the credentials and sensor definition for the inverter
modbus: !include custom_components/HA-FoxESS-Modbus/modbusH3USB.yaml

#Sensors turn power values into power/hour values for meters
sensor: 
  - method: left
    name: pv1_sum
    platform: integration
    round: 2
    source: sensor.pv1_power
    unit_time: h
  - method: left
    name: pv2_sum
    platform: integration
    round: 2
    source: sensor.pv2_power
    unit_time: h
  #- method: left
  #  name: pv_total_sum  #can be replaced by sensor.pv_energy_total ("PV Energy total", register 32002)
  #  platform: integration
  #  round: 2
  #  source: sensor.pv_power_now
  #  unit_time: h
  
  #- method: left
  #  name: load_sum  #can be replaced by "Inv Load Energy total", register 32022)
  #  platform: integration
  #  round: 2
  #  source: sensor.load_power
  #  unit_time: h
  
  #- method: left
  #  name: bat_charge_sum #can be replaced by "Battery Charge Energy total"
  #  platform: integration
  #  round: 2
  #  source: sensor.battery_charge
  #  unit_time: h
  
  #- method: left
  #  name: bat_discharge_sum  #can be replaced by "Battery Discharge Energy total"
  #  platform: integration
  #  round: 2
  #  source: sensor.battery_discharge
  #  unit_time: h
  
  #- method: left
  #  name: feedin_sum  #can be replaced by "Meter Feed-in Energy total"
  #  platform: integration
  #  round: 2
  #  source: sensor.feed_in_power
  #  unit_time: h
  
  #- method: left
  #  name: grid_consumption_sum #can be replaced by "Meter Consumption Energy total"
  #  platform: integration
  #  round: 2
  #  source: sensor.grid_consumption
  #  unit_time: h

 #Templates enable math operations against states/values to give us better data
template:
  - sensor:
      - name: "Battery Discharge"  #absolute value. 0 when charging
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {% if (states('sensor.battery_discharge_power') | float(default=0) ) > 0 %}
            {{ states('sensor.battery_discharge_power') | float(default=0) * 1 }}
            {% else %}
            0 
            {% endif %}
      - name: "Battery Charge"   #absolute value. 0 when discharging
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {% if (states('sensor.battery_discharge_power') | float(default=0) ) < 0 %}
            {{ states('sensor.battery_discharge_power') | float(default=0) * -1 }}
            {% else %}
            0 
            {% endif %}
      - name: "Inverter Load power"
        device_class: "power"
        unit_of_measurement: "W"
        state: >
               {{ (states('sensor.load_power_r') | float(default=0)
               + states('sensor.load_power_s') | float(default=0)
               + states('sensor.load_power_t') | float(default=0)) | round(2) }}
      - name: "Meter Power"
        device_class: "power"
        unit_of_measurement: "W" #negative=consumption/importing from grid
        state: >
            {{ states('sensor.meter_power_r') | float(default=0)
            + states('sensor.meter_power_s') | float(default=0)
            + states('sensor.meter_power_t') | float(default=0)
            }}
      - name: "Inverter Feed In Power"
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {% if (states('sensor.inverter_load_power') | float(default=0) ) > 0 %}
            {{ states('sensor.inverter_load_power') | float(default=0) }}
            {% else %}
            0 
            {% endif %}
      - name: "Inverter Grid Consumption"
        device_class: "power"
        unit_of_measurement: "W"
        state: >
            {% if (states('sensor.inverter_load_power') | float(default=0) ) < 0 %}
            {{ states('sensor.inverter_load_power') | float(default=0) * -1 }}
            {% else %}
            0 
            {% endif %}
      - name: "PV Power Now"
        device_class: "power"
        unit_of_measurement: "W"
        state: >
              {{ (states('sensor.pv1_power') | float(default=0) + states('sensor.pv2_power') | float(default=0) ) }}
      - name: "Inverter System Losses"
        device_class: "power"
        unit_of_measurement: "W"
        state: >
               {{ ((states('sensor.pv1_power') | float(default=0)
               + states('sensor.pv2_power') | float(default=0)
               + states('sensor.inverter_grid_consumption') | float(default=0) 
               + states('sensor.battery_discharge_power') | float(default=0) 
               - states('sensor.inverter_load_power') | float(default=0) )) | round(2) }}
      - name: "EPS remaining time"
        device_class: "duration"
        unit_of_measurement: "hours"
        # hardcoded values here: 20% minimum SoC (not usable), 14kWh battery total capacity -> 140 kwh/% strange unit
        state: >
               {{ (((states('sensor.battery_soc') | float(default=0)) -20)*140
               / (states('sensor.inverter_load_power') | float(default=0))) | round(2) }}
# Utility Meters - Provides meters to be used with the energy dashboard and reset daily
utility_meter:
  #load_daily:  #can be replaced by "Inv Load Energy daily" 
  #  source: sensor.load_sum
  #  cycle: daily
  pv1_daily:
    source: sensor.pv1_sum
    cycle: daily
  pv2_daily:
    source: sensor.pv2_sum
    cycle: daily
  #feedin_daily:  #can be replaced by "Meter Feed-in Energy daily"
  #  source: sensor.feedin_sum
  #  cycle: daily
  #grid_daily:   #can be replaced by "Meter Consumption Energy daily"
  #  source: sensor.grid_consumption_sum
  #  cycle: daily
  losses_daily:
    source: sensor.losses_sum
    cycle: daily